{"version":3,"sources":["components/timer.js","components/App.js","serviceWorker.js","index.js"],"names":["Timer","react_default","a","createElement","className","this","props","timeNow","minute","seconde","Object","defineProperty","start","disabled","stop","onClick","addclick","removeclick","startButton","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","stockMin","startInterval","bind","assertThisInitialized","secondsAndMinutes","addMinute","removeMinute","setState","timerSeconde","setInterval","clearInterval","timer","React","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7823bd9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Timer extends Component {\n\n\n    render() {\n        return (\n            <div className=\"main\">\n\n    {/* Title */}\n\n                <div className=\"logo\">\n\n                    <p>Pomodoro</p>\n\n                </div>\n\n    {/* Rendering of the minutes and seconds */}\n\n                <div className=\"time\">\n                    <p>\n                        {this.props.timeNow.minute < 10\n                            ? \"0\" + this.props.timeNow.minute\n                            : this.props.timeNow.minute}\n                        :\n              {this.props.timeNow.seconde < 10\n                            ? \"0\" + this.props.timeNow.seconde\n                            : this.props.timeNow.seconde}\n                    </p>\n                </div>\n\n                <div>\n\n                    <button\n                        className={\n                            this.props.timeNow.start ? \"invisible\" : \"card-footer-item\"\n                        }\n                        disabled={this.props.stop}\n                        onClick={this.props.addclick}\n                        className=\"addOrRemove\">\n                        <i className=\"fas fa-plus\"></i>\n                    </button>\n\n                    <button\n                        className={\n                            this.props.timeNow.start ? \"invisible\" : \"card-footer-item\"\n                        }\n                        onClick={this.props.removeclick}\n                        className=\"addOrRemove\" >\n                        <i className=\"fas fa-minus\"></i>\n                    </button>\n\n                </div>\n\n    {/* Buttons: either Start or Reset depending on the state of the click*/}\n\n                <div className=\"toggle\">\n\n                    <button\n                        className=\"card-footer-item\"\n                        onClick={this.props.startButton}\n                    >\n                        {this.props.timeNow.start ? \"Reset\" : \"Start\"}\n                    </button>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Timer;\n\n\n","import React from \"react\";\nimport Timer from \"./timer.js\";\n\nclass App extends React.Component {\n\n\n  constructor(props) {   //Constructor = starting state with set data\n    super(props);\n\n    this.state = {\n      \n      start: false, //checks if the start function has been launched and will be changed to true once launched\n      minute: 25,\n      seconde: 0,\n      stockMin: 25\n\n    };\n\n    this.startInterval = this.startInterval.bind(this);\n    this.secondsAndMinutes = this.secondsAndMinutes.bind(this);\n    this.addMinute = this.addMinute.bind(this);\n    this.removeMinute = this.removeMinute.bind(this);\n  }\n\n  startInterval() {\n    if (this.state.start === false) {\n      this.setState(\n        {\n          start: true //will allow the button to be changed to Reset\n        },\n\n        //setInterval is a function that takes two parameters : the function to execute (here the function secondAndMinutes) and the time, here 1000ms (1sec)\n        function() { \n          this.timerSeconde = setInterval(this.secondsAndMinutes, 1000);\n        }\n      );\n\n    } else {\n      //if the reset button is clicked, setInterval is stopped through the method clearInterval and these data are set. Has on parameter, the id sent by the method setInterval\n      clearInterval(this.timerSeconde);\n      this.setState({\n        start: false,\n        minute: this.state.stockMin,\n        seconde: 0\n      });\n    }\n  }\n\n  secondsAndMinutes() {\n\n    if (this.state.minute === 0 && this.state.seconde === 0) {\n      return;\n    }\n\n    if (this.state.seconde === 0) {\n      this.state.minute -= 1;\n      this.state.seconde = 60;\n\n    }else{\n\n    this.setState({\n      seconde: (this.state.seconde -= 1)\n    \n    });\n  }\n  }\n\n  addMinute() {\n\n    if (!this.state.start) {\n      //if the button start has not been clicked (so it cannot be clicked at all when running), the user can only go up to 60 minutes when he adds minutes\n      if (this.state.minute === 60) {\n        return;\n      }\n      //adds one minute\n      this.setState({\n        minute: (this.state.minute += 1)\n      });\n    }\n  }\n\n  removeMinute() {\n    if (!this.state.start) {\n      if (this.state.minute === 0) {\n        return;\n      }\n      this.setState({\n        minute: (this.state.minute -= 1)\n      }); \n    }\n  }\n  \n\n  render() {\n    return (\n      <div>\n        <Timer\n          startButton={this.startInterval}\n          timeNow={this.state}\n          addclick={this.addMinute}\n          removeclick={this.removeMinute}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./css/index.css\";\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}